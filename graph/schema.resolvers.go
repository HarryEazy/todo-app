package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"todo_app/db"
	"todo_app/graph/generated"
	"todo_app/graph/model"
)

// Mutation Resolver for adding a new task
func (r *mutationResolver) AddTask(ctx context.Context, title string, description *string) (*model.Task, error) {
	task := &model.Task{
		Title:       title,
		Description: description,
		Status:      "pending", // Default status
	}

	// Insert task into the database
	res, err := db.DB.Exec("INSERT INTO tasks (title, description, status) VALUES (?, ?, ?)", task.Title, task.Description, task.Status)
	if err != nil {
		return nil, err
	}

	// Get the last inserted ID
	id, err := res.LastInsertId()
	if err != nil {
		return nil, err
	}
	task.ID = fmt.Sprintf("%d", id)

	return task, nil
}

// Mutation Resolver for updating an existing task
func (r *mutationResolver) UpdateTask(ctx context.Context, id string, title *string, description *string, status *string) (*model.Task, error) {
	task, err := r.Query().Task(ctx, id)
	if err != nil {
		return nil, err
	}

	// Update fields if they are provided
	if title != nil {
		task.Title = *title
	}
	if description != nil {
		task.Description = description
	}
	if status != nil {
		task.Status = *status
	}

	// Update task in the database
	_, err = db.DB.Exec("UPDATE tasks SET title=?, description=?, status=? WHERE id=?", task.Title, task.Description, task.Status, id)
	if err != nil {
		return nil, err
	}

	return task, nil
}

// Mutation Resolver for deleting a task
func (r *mutationResolver) DeleteTask(ctx context.Context, id string) (bool, error) {
	_, err := db.DB.Exec("DELETE FROM tasks WHERE id=?", id)
	if err != nil {
		return false, err
	}
	return true, nil
}

// Mutation Resolver for marking a task as completed
func (r *mutationResolver) MarkTaskCompleted(ctx context.Context, id string) (*model.Task, error) {
	task, err := r.Query().Task(ctx, id)
	if err != nil {
		return nil, err
	}

	// Update status to completed
	task.Status = "completed"
	_, err = db.DB.Exec("UPDATE tasks SET status=? WHERE id=?", task.Status, id)
	if err != nil {
		return nil, err
	}

	return task, nil
}

// Query Resolver for getting all tasks
func (r *queryResolver) Tasks(ctx context.Context) ([]*model.Task, error) {
	var tasks []*model.Task
	err := db.DB.Select(&tasks, "SELECT id, title, description, status FROM tasks")
	if err != nil {
		return nil, err
	}
	return tasks, nil
}

// Query Resolver for getting a single task by ID
func (r *queryResolver) Task(ctx context.Context, id string) (*model.Task, error) {
	var task model.Task
	err := db.DB.Get(&task, "SELECT id, title, description, status FROM tasks WHERE id=?", id)
	if err != nil {
		return nil, err
	}
	return &task, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
